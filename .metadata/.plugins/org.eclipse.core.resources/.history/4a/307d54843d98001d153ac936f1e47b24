package gameServer;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Stack;

public class CardStack {
	Stack<Card> cards;
	public int numPlayers;
	public CardStack(int numPlayers) { // 42 cards in one deck, excluding exploding kittens and defuse
		this.numPlayers = numPlayers;
		cards = new Stack<Card>();
		
		int numDecks = Math.round((float)Math.ceil((double)(numPlayers)/5));
		System.out.println(numDecks);
		CardType[] cardTypes = new CardType[] {
				CardType.Attack, CardType.Favour, CardType.Nope,
				CardType.Shuffle, CardType.Skip, CardType.SeeTheFuture,
		};
		int[] cardAmounts = new int[] {
				2 * numDecks, 4 * numDecks, 5 * numDecks,
				4 * numDecks, 5 * numDecks, 4 * numDecks
		};
		for (int i = 0; i < cardTypes.length; i++) {
			for (int j = 0; j < cardAmounts[i]; j++) {
				cards.push(new Card(cardTypes[i]));	
			}
		}
		DogCardType[] dogCardTypes = new DogCardType[] {
				DogCardType.BeardDog, DogCardType.PotatoDog, DogCardType.RainbowRalphingDog,
				DogCardType.TacoDog, DogCardType.WatermelonDog
		};
		for (DogCardType t : dogCardTypes) {
			for(int i = 0 ; i < 4 * numDecks; i++) {
				Card c = new Card(CardType.CatCard);
				c.specificCardType = t;
				cards.push(c);
			}		
		}
		for (int i = 0; i < (6 * numDecks) - numPlayers; i++) {
			cards.push(new Card(CardType.Defuse));
		}
		insertionRandomiseDeck();
	}
	public void insertImploadingDoggos() {
		for (int i = 0; i < numPlayers-1; i++) {
			cards.push(new Card(CardType.ExplodingKitten));
		}
		insertionRandomiseDeck();
	}
	
	public void insertionRandomiseDeck() {
		for (int i = 0; i < cards.size(); i++) {
			cards.get(i).redoRandom();
		}
		Stack<Card> randomised = new Stack<Card>();
		Card c = cards.pop();
		randomised.push(c);
		while (cards.size() > 0) {
			c = cards.pop();
			for (int i = 0; i < randomised.size(); i++) {
				if (c.randomNumber < randomised.get(i).randomNumber) {
					randomised.insertElementAt(c, i);
				}else if (i == randomised.size()) randomised.insertElementAt(c, i+1);
			}
		}
		cards = randomised;
	}
	
	public Card drawCard(Player plr) {
		Card c = cards.pop();
		EventSystem.cardDrawn.invoke(new PlrCardPair(plr, c));
		return c;
	}

}
class PlrCardPair {
	Player player;
	Card card;
	public PlrCardPair(Player plr, Card c) {
		this.player = plr;
		this.card = c;
	}
}